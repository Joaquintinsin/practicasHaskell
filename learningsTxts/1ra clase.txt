-- se comenta en haskell
{- comentarios -}

git.
un jefe tiene un proyecto, dos programadores hacen ideas sobre esa idea
se comparten entre ellos las ideas
el jefe recibe luego las dos ideas, pero al hacerlo es mas complicado
poder identificar las diferencias en el avance del software, que se pueda deshacer alguna modificacion
tener un control sobre las modificaciones: git

gestionar codigo
pasamos de nuestro codigo (espacio de trabajo) a un repositorio comun : git init

definir una carpeta como espacio de trabajo en git: git init (estar parado en la carpeta) (aparece un .git al hacerle git init)
qué cosas debe subir git al repositorio: en un editor poner los archivos indeseados: ponerle como extension .gitignore
git status: me dice los archivos que van a subirse

pasar archivos al repositorio comun : git add <nombrearchivo>

confirmar los cambios despues del git status (gst) : git commit "nombreproyecto" (ser lo mas especifico posible)

git remote add <remote url> para vincular mi repositorio local con un repositorio remoto (segun url)

git push --d origin main : subis el repo local al repo remoto, pide usuario y contraseña de github

se le debe dar permisos a otra persona del repositorio remoto para que pueda subir cosas ahí
collaborator (settings del repositorio) : agregar usuario de github

pull request seria como no añadir un colaborador pero que pueda subir alguna modificacion al repositorio

git clone (clono el repositorio local)
con git pull me guardo mi repositorio local y me quedo con los cambios de la otra persona

¿cuando pulleamos, sobreescribimos lo que nosotros tenemos?

git config --local user.name "nombre y apellido"
git config --local user.email "email"
git config --local core.fileMode false

infijo: 2 ^ 29
prefijo: ^ 2 29
